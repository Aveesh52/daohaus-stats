# should just create Moloch... but register vs summons issue?
# need to check data at register/summons

# type Dao @entity {
#   id: ID!
#   createdAt: String!
#   index: String
#   moloch: Bytes! # address
#   summoner: Bytes! # address
#   title: String
#   version: String
#   newContract: String
#   deleted: Boolean
# }

type Moloch @entity {
  id: ID!
  summoner: Bytes!
  title: String
  version: String
  newContract: String
  deleted: String

  summoningTime: BigInt
  periodDuration: BigInt
  votingPeriodLength: BigInt
  gracePeriodLength: BigInt
  proposalDeposit: BigInt
  dilutionBound: BigInt
  processingReward: BigInt
  depositToken: Token

  "NOTE: Review how this is added to"
  approvedTokens: [Token!]
  tokens: [Token!] @derivedFrom(field: "moloch")
  members: [Member!] @derivedFrom(field: "moloch")
  tokenBalances: [TokenBalance!] @derivedFrom(field: "moloch")
  proposals: [Proposal!] @derivedFrom(field: "moloch")
  guildTokenBalance: [TokenBalance!]
  escrowTokenBalance: [TokenBalance!]

  "TODO: update on all event handlers -- currentPeriod = now.sub(summoningTime).div(periodDuration)"
  currentPeriod: BigInt
  totalShares: BigInt
  totalLoot: BigInt
  proposalCount: BigInt
  proposalQueueCount: BigInt

  "NOTE: No flag for new member proposal check if applicant address is already a member"
  proposedToJoin: [Proposal!]
  proposedToWhitelist: [Proposal!]
  proposedToKick: [Proposal!]
  proposedToFund: [Proposal!]
  proposedToTrade: [Proposal!]
}

type TokenBalance @entity {
  id: ID!
  moloch: Moloch!
  token: Token!
  tokenBalance: BigInt!
  member: Member
  guildBank: Boolean!
  ecrowBank: Boolean!
  memberBank: Boolean!
}

type Token @entity {
  id: ID!
  moloch: Moloch!

  tokenAddress: Bytes!
  whitelisted: Boolean!

  "TODO: REMOVE THESE? pull in from etherscan"
  ticker: String
  logo: String
  details: String
  approved: Proposal
}

type Member @entity {
  id: ID!
  createdAt: String!
  "NOTE: replicate in v1"
  moloch: Moloch!

  molochAddress: Bytes!
  memberAddress: Bytes!
  delegateKey: Bytes!
  shares: BigInt!
  loot: BigInt!
  exists: Boolean!
  highestIndexYesVote: Proposal
  tokenTribute: BigInt!
  didRagequit: Boolean!
  votes: [Vote!] @derivedFrom(field: "member")
  submissions: [Proposal!] @derivedFrom(field: "member")
  tokenBalances: [TokenBalance!] @derivedFrom(field: "member")
  proposedToKick: Boolean!
  kicked: Boolean!
  jailed: Proposal
}

type Vote @entity {
  id: ID!
  createdAt: String!

  proposal: Proposal!
  member: Member!
  uintVote: Int!
  molochAddress: Bytes!

  "NOTE: legacy v1"
  proposalIndex: BigInt!
  delegateKey: Bytes!
  memberAddress: Bytes!
}

type Proposal @entity {
  id: ID!
  createdAt: String!
  proposalIndex: BigInt
  proposalId: BigInt!
  moloch: Moloch!
  molochAddress: Bytes!
  member: Member!
  memberAddress: Bytes!
  delegateKey: Bytes!
  applicant: Bytes!
  proposer: Bytes
  sponsor: Bytes
  sharesRequested: BigInt!
  lootRequested: BigInt
  tributeOffered: BigInt!
  tributeToken: Bytes
  paymentRequested: BigInt
  paymentToken: Bytes
  startingPeriod: BigInt!
  yesVotes: BigInt!
  noVotes: BigInt!

  "NOTE: Will need to unrequire anything not on both versions"
  sponsored: Boolean
  processed: Boolean!
  didPass: Boolean!
  cancelled: Boolean
  aborted: Boolean
  whitelist: Boolean
  guildkick: Boolean
  newMember: Boolean
  trade: Boolean
  details: String!
  maxTotalSharesAndLootAtYesVote: BigInt
  votes: [Vote!] @derivedFrom(field: "proposal")

  "NOTE: Can we get for v1 too?"
  yesShares: BigInt!
  noShares: BigInt!
}
