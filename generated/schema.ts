// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MolochV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MolochV2 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MolochV2 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MolochV2", id.toString(), this);
  }

  static load(id: string): MolochV2 | null {
    return store.get("MolochV2", id) as MolochV2 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string | null {
    let value = this.get("index");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set index(value: string | null) {
    if (value === null) {
      this.unset("index");
    } else {
      this.set("index", Value.fromString(value as string));
    }
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get moloch(): Bytes {
    let value = this.get("moloch");
    return value.toBytes();
  }

  set moloch(value: Bytes) {
    this.set("moloch", Value.fromBytes(value));
  }

  get summoner(): Bytes {
    let value = this.get("summoner");
    return value.toBytes();
  }

  set summoner(value: Bytes) {
    this.set("summoner", Value.fromBytes(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (value === null) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(value as string));
    }
  }

  get newContract(): string | null {
    let value = this.get("newContract");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newContract(value: string | null) {
    if (value === null) {
      this.unset("newContract");
    } else {
      this.set("newContract", Value.fromString(value as string));
    }
  }

  get version(): string | null {
    let value = this.get("version");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (value === null) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(value as string));
    }
  }
}
